<?xml version='1.0'?>
<!DOCTYPE ProtocolDescription SYSTEM "ProtocolDescription.dtd">

<!-- transform this xml into html (so you can view it in a browser): -->
<?xml-stylesheet type="text/xsl" href="ProtocolDescription_xml2html.xsl"?>

<ProtocolDescription>

  <Intro>
  <p>
  <i>NOTE: This document is available in a HTML form at the following address:
  <url>http://springrts.com/dl/tasclient/ProtocolDescription.xml</url></i>
  </p>

  <h3>Introduction</h3>
  <p>
  This is a simple text protocol in a "human readable form". I decided for text protocol since
  it's easier to debug and implement on the client side. It does require some more overhead,
  but since server and clients do not communicate much anyway, this is not an issue. What
  really eats the bandwidth is the game itself, not lobby.
  </p>

  <h3>Nomenclature</h3>
  <p>
  We use two terms for "clients": <i>client</i> and an <i>user</i>.
  At first, <i>user</i> was considered to be a registered client,
  that means a client that is logged-in.
  The two terms are used uncleanly though, so you may best think of them as equal.
  </p>
  <h4>Legend</h4>
  <p>
  <ul>
    <li>{} = sentence = several words (at least one!) separated by space characters</li>
    <li>{} {} ... = two or more sentences. They are separated by TAB characters.</li>
    <li>words are always separated by space characters.</li>
    <li>| = separates choices ("OR")</li>
    <li>[] = denotes an optional argument</li>
  </ul>
  </p>

  <h3>Protocol low-level format rules</h3>
  <p>
  Single word arguments are separated by spaces,
  "sentences" (a sentence is a series of words separated by spaces, denoting a single argument)
  are separated by TABs.
  Make sure to replace all TABs in your sentences with spaces (2 or 8 usually)!
  If you do not, your command is invalid, and will not be read correctly by the server.
  </p>
  <p>
  Lines sent and received may be of any length. It has been tested with 600 KB
  long strings and it worked in both directions. Nevertheless, commands like
  "CLIENTS" still try to divide data into several lines, just to make sure the
  client will receive them. Since the Delphi lobby client (TASClient) now
  supports lines of any length, dividing data into several lines is not needed
  anymore. Though, we keep it just in case, to be compatible with other clients
  which may emerge in the future. I do not divide data when sending info on
  battles and clients in battles. This lines may get long, but not longer than a
  couple of hundred bytes (they should always be under 1 KB in length).
  </p>

  <h3>Protocol rules</h3>
  <p>
  A client must maintain a constant connection with the server.
  That is if no data is to be transfered,
  the client must send <clink name="PING"/> commands to the server on regular intervals.
  This ensures that the server can properly detect any network timeouts/disconnects.
  The server will automatically disconnect a client
  if no data has been received from it within a certain time period.
  A client should send some data at least after half that interval passed.
  </p>
  <p>
  Clients may find out whether a battle is in progress or not
  by monitoring the battle-founder's status.
  If his status changes to "in game", the battle's status is also "in game".
  </p>
  <p>
  A client's status and battle status are assumed to be 0 if not specified otherwise.
  Each client should assume that every other client's status and battle statuses are 0
  if not stated otherwise by the server.
  So when a client joins the server, he is notified about statuses of those users only,
  who have status or battle status different from 0.
  This way we also save some bandwidth
  (although that is not really an issue here.
  If we were worried about this protocol taking up too much bandwidth,
  we would not use a text protocol, would we?).
  </p>
  <p>
  Most of the commands that notify about some changes are forwarded to the source of the change too.
  For example: When a client sends a <clink name="MYBATTLESTATUS"/> command,
  the server sends a <clink name="CLIENTBATTLESTATUS"/> command to all users in the battle,
  including the client who sent the <clink name="MYBATTLESTATUS"/> command.
  This is a good practice, because this way the client can synchronize
  his local status with the server's, after the server has actually updated
  his status (it also serves as confirmation mechanism).
  </p>
  <p>
  All commands except for some admin specific commands are listed here.
  For more details on a specific command,
  you may have a look at a lobby servers source code,
  for example SpringLS or ueberserver.
  </p>
  <p>
  A Client may participate in only one battle at the same time. If he is hosting
  a battle, he may not participate in other battles at the same time. The server
  checks for that automatically.
  </p>
  <p>
  Team colors are currently set by players, perhaps it would be better if only
  the host would be able to change them?
  </p>
  <h4>Messages IDs</h4>
  <p>
  As of version 0.33, the command syntax has been slightly changed.
  Messages may now contain IDs:
  Any message may be prefixed with a message ID.
  For example:
  "#123 SAY main hello!" <br />
  Server will use this ID with a reply, for example:
  "#123 SAID main Betalord hello!" <br />
  The message ID has only one function: to ease tracking server responses for the client.
  Using message IDs means that the client can also use synchronous communication (with certain commands),
  which makes it easier to implement commands that require multiple responses in both directions.
  <br />
  Note that IDs should be non-negative values, in a 31-bit range (0..2147483647).
  Negative values are reserved for internal handling logic of the server / lobby clients.
  </p>


  <p>
  <h3>Sub-systems</h3>
  </p>

  <h4>Syncing</h4>
  <p>
  To be in sync means, to have the same versions of all the content
  required to play a game.
  It works by clients comparing host's hash code with their own. If the two
  codes match, client should update his battle status and this way telling other
  clients in the battle that he is synced (or unsynced otherwise). The hash code
  comes from hashing the mod's file and probably all the dependences too. See
  unitsync documentation for details.
  </p>

  <h4>Hole punching</h4>
  <p>
  <quote>
  Hole punching is a computer networking technique
  for establishing communications between two parties in separate organizations
  who are both behind restrictive firewalls.
  </quote>
  <url>https://en.wikipedia.org/wiki/Hole_punching</url>

  We use it for allowing clients to connect to the lobby server,
  that would otherwise not be able to.

  This will probably not work in LAN mode, especially if combined with
  players from the internet.
  </p>
  <h5>Non-host perspective</h5>
  <p>
  When joining a battle, a client should first acquire his UDP source port
  from the server before sending the <clink name="JOINBATTLE"/> command.
  Once he has done that and joined the battle,
  he should keep sendings some UDP packets to the server on regular intervals,
  just to make sure the router does not forget about it and remove it
  from its translation table
  (some routers have timeout as short as 20 seconds,
  so this should also be the minimum refresh interval).
  Once the game actually starts,
  the client lobby should stop sending UDP packets to the server
  since the OS will not allow it anyway
  (will not be able to bind the same source port,
  as it will already be bound by spring.exe).
  Also, there is no need for it,
  since spring.exe will keep sending the packets
  and so keep the port open instead of the lobby client.
  Once the lobby client detects the user has returned from the game,
  it should start sending the UDP packets again,
  in order to keep the "connection" alive.
  Another thing to note is,
  that the lobby client does not need to "punch through"
  like it has to when hosting, since spring.exe will do that anyway.

  Just before starting the game,
  the server will send a <clink name="HOSTPORT"/> command to the user,
  containing the host's public UDP source port.
  The lobby cient should replace the battle's port with this one,
  as it will have to connect to this port and not the original one
  (acquired through the <clink name="BATTLEOPENED"/> command).
  </p>
  <h5>Host perspective</h5>
  <p>
  Before sending the <clink name="OPENBATTLE"/> command,
  the host should try to acquire his UDP source port from the server,
  just to make sure it can acquire it at all
  (better to find out it does not work before hosting,
  than right before starting the game).
  Nevertheless, the lobby client does not need to keep to refresh this port,
  since it will not be used to actually host the game.
  It is just a test to see if it works,
  not to actually acquire a port for hosting.
  Each time a new client joins the battle,
  the server will send a <clink name="CLIENTPORT"/> command,
  telling the host about this client's public UDP source port.
  The host should remember this information,
  as he will have to use it when starting the game.
  Right before starting the game,
  the host should try to acquire his source port again.
  This time he will actually use this port to host the game.
  Upon starting the game,
  the server will notify all clients participating in his battle about his port,
  using the <clink name="HOSTPORT"/> command.
  The host does not need to keep refreshing his connection
  to keep the port open,
  as spring.exe will do that for him.
  Also, upon returning from the game,
  he does not need to start refreshing it either
  (as a non-host would have to),
  since when he will start a new game,
  he will have to acquire a new source port anyway.
  This is mostly because some people could play "single-player" games with bots
  before opening the battle to other players,
  and spring.exe would of course not keep the connection alive in that case,
  and upon returning from the game,
  the port would already be timed-out long ago.
  This is why the host has to acquire a new port each time it starts a battle.
  </p>

  <h4>Match-Making</h4>
  <p>
  With match-making, we mean a somewhat abstract way of automating
  the process of users finding to each other in battle rooms
  to play a game of a type they like.

  For us this means, more specifically,
  that users get shuffled around hosts (usually autohosts) that support match-making,
  according to preferences they set, by the hand of a central match planning strategy/algorithm.
  Match-making enabled hosts have to be marked as such.
  The current way of doing this is, to let them report a CPU frequency of 6667.
  This way, each lobby client may choose to visually outline this host property
  in a certain way or not at all.
  A user may choose to take part in match-making by entering one of these hosts battle.
  When a match-maker sends a request for a certain user to switch hosts
  by sending a <clink name="FORCEJOINBATTLE:client"/> command to the server,
  and the server subsequently sends a <clink name="FORCEJOINBATTLE:server"/>
  to that addressed user,
  the lobby client must comply by joining that hosts battle-room.
  To opt-out of the match-making process,
  a user has to leave the battle-room,
  after then he may join a non-match-making enabled host.
  </p>

  </Intro>

  <RecentChanges>
  <p>

  <b><u>Version 0.37-SNAPSHOT:</u></b><br />
  <ul>
    <li>Implemented basic match-making system support,
	see the <i>Match-Making</i> section in the beginning of this document.</li>
    <li>Added the <clink name="FORCEJOINBATTLE:client"/> client command.</li>
    <li>Added the <clink name="FORCEJOINBATTLE:server"/> server command.</li>
    <li>
    <i>Compatibility-Flags</i>
    <p>
    This list explains the current compatibility flags a client may send
    with the <clink name="LOGIN:client"/> command.
    This list will be emptied whenever a new protocol version gets released.
    They denote that the client supports:
    <ul>
      <li><b>a</b>: account IDs sent in the <clink name="ADDUSER"/> command</li>
      <li><b>b</b>: the battle authorization system
        (<clink name="JOINBATTLEREQUEST"/>, <clink name="JOINBATTLEACCEPT"/>
        and <clink name="JOINBATTLEDENY"/> commands)</li>
      <li><b>sp</b>: the scriptPassword parameter, sent in the
        <clink name="JOINEDBATTLE"/> command</li>
      <li><b>m</b>: the basic match-making command
        <clink name="FORCEJOINBATTLE:server"/></li>
    </ul>
    </p>
    </li>
  </ul>

  <b><u>Version 0.36:</u></b><br />
  <ul>
    <li>'scriptPassword' argument added: This change affects the following commands:
        <clink name="LOGIN"/>, <clink name="JOINBATTLE"/>, <clink name="JOINEDBATTLE"/>.</li>
  </ul>

  <b><u>Version 0.35:</u></b><br />
  <ul>
    <li>'serverMode' argument has been added to the <clink name="TASSERVER"/> command.</li>
    <li>Added <clink name="SETSCRIPTTAGS"/> command. This command replaces <clink name="UPDATEBATTLEDETAILS"/> command.</li>
    <li>Added <clink name="REMOVESCRIPTTAGS"/> command, companion to <clink name="SETSCRIPTTAGS"/>.</li>
    <li>New startpos type added: "choose before battle" (type 3). These change affects following commands:
        <clink name="OPENBATTLE"/>, <clink name="JOINBATTLE"/>.</li>
    <li>Added two more in-game ranks, one at 300h, the other at 1000h.</li>
    <li>Removed <clink name="UPDATEBATTLEDETAILS"/> command as it is no longer needed (use <clink name="SETSCRIPTTAGS"/> instead).
        Also removed several arguments from <clink name="JOINBATTLE"/> and <clink name="OPENBATTLE"/> commands (all these
        arguments are handled via <clink name="SETSCRIPTTAGS"/> command now). See descriptions of these commands for more info.</li>
  </ul>

  <b><u>Version 0.34:</u></b><br />
  <ul>
    <li>Message/command ID system has been implemented to automatically (and transparently) support any
        command regardless of the method handler implementation. This means that the response to any command
        will always contain message ID if you specifed it with the original command.</li>
    <li><clink name="PING"/> command no longer supports 'key' argument since it is not needed anymore (use message ID instead)</li>
    <li>Lobby programs should now acquire Spring version via unitsync.dll and not by running spring.exe, although
        both ways are legal.</li>
    <li><clink name="LOGIN"/> command now accepts additional parameter 'userID', which is optional. See the <clink name="LOGIN"/> command description
        for more info.</li>
    <li>Added <clink name="ACQUIREUSERID"/> and <clink name="USERID"/> commands. See documentation bellow for further details.</li>
    <li>Added 'url' parameter to <clink name="SERVERMSGBOX"/> command.</li>
    <li>Added lineage mode to "end game condition" parameter (which is used with several commands).</li>
  </ul>

  <b><u>Version 0.33:</u></b><br />
  <ul>
    <li><clink name="TASSERVER"/> command has been modified, see documentation bellow for further details.
        Note that clients should now acquire local Spring version by running "spring.exe --version"
        (they need this info to compare local Spring version to the server's).</li>
    <li><clink name="REQUESTUPDATEFILE"/> command has been modified, see documentation bellow for further details</li>
    <li>Note that MsgIDs (as described in the "Introduction" part) aren't fully supported yet - server will
        parse IDs, but won't include them in the response.</li>
  </ul>

  </p>
  </RecentChanges>

  <CommandList>

    <Command Name="PING" Source="client">
      <Description>
      Client should send this command on every few seconds to maintain constant connection to the server.
      Server will assume timeout occured if it does not hear from client for more than x seconds.
      To figure out how long does a reply take, use message ID with this command.
      </Description>
      <Response>
      See <clink name="PONG"/>.
      </Response>
    </Command>

    <Command Name="PONG" Source="server">
      <Description>
      Used as a response to a <clink name="PING"/> command.
      You can determine how long the reply took
      by using a message ID with the <clink name="PING"/> command.
      </Description>
      <Response />
    </Command>

    <Command Name="TASSERVER" Source="server">
      <Arguments>
        <Argument Name="protocolVersion" Optional="no" Sentence="no">
        This is the lobby protocol version used by the server.
        The client may check if it supports this version before attempting to log in.
        If it does not support it, it should send the
        <clink name="REQUESTUPDATEFILE"/> command).
        </Argument>
        <Argument Name="springVersion" Optional="no" Sentence="no">
        This is the latest Spring version which user needs in order to play with other players on this server.
        Client should check if it has this Spring version before attempting to log in. If it does not have it,
        it should send a <clink name="REQUESTUPDATEFILE"/> command.
        <br />
        Note that if the value of this parameter is "*", client should simply ignore it since this means that
        server does not contain any updates nor does it require latest Spring version (this is usually so
        when server is running in LAN mode).
        </Argument>
        <Argument Name="udpPort" Optional="no" Sentence="no">
        This is server's UDP port where "NAT Help Server" is running. This is the port to
        which clients should send their UDP packets when trying to figure out their public
        UDP source port. This is used with some NAT traversal techniques (e.g. "hole punching").
        </Argument>
        <Argument Name="serverMode" Optional="no" Sentence="no">
        Tells what mode server is in. Currently valid are:
        <ul>
          <li>0 - normal mode</li>
          <li>1 - LAN mode</li>
        </ul>
        </Argument>
      </Arguments>
      <Description>
      This is the first message (i.e. "greeting message") that client receives upon connecting to the server.
      </Description>
      <Response />
      <Examples>
        <Example>TASSERVER 0.35 0.72b1 8201 0</Example>
        <Example>TASSERVER 0.35 * 8201 0</Example>
      </Examples>
    </Command>

    <Command Name="REQUESTUPDATEFILE" Source="client">
      <Arguments>
        <Argument Name="name and version" Optional="no" Sentence="yes">
        Program name and version for which client is requesting an update. For example,
        if user's Spring is outdated it will provide for example "Spring 0.72b1", or if
        TASClient is outdated it will provide for example "TASClient 0.30", similar for
        other lobby clients or bots, for which server provides updates.
        </Argument>
      </Arguments>
      <Description>
      Sent by client who is using an outdated Spring or lobby program and is trying to figure
      out if server has some update for him (client can figure out if he is using outdated
      software via <clink name="TASSERVER"/> command).
      If both, Spring and lobby program are outdated, request only Spring update since it will most
      likely contain an update for the lobby program as well.
      </Description>
      <Response>
      Server will respond with <clink name="OFFERFILE"/> command if it has an update for the client,
      or else it will display a message box (via <clink name="SERVERMSGBOX"/> command) or similar.
      </Response>
      <Examples>
        <Example>REQUESTUPDATEFILE Spring 0.72b1</Example>
        <Example>REQUESTUPDATEFILE TASClient 0.30</Example>
      </Examples>
    </Command>

    <Command Name="REGISTER" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no" />
        <Argument Name="password" Optional="no" Sentence="no">
        Must be sent in encoded form (MD5 hash in base-64 form).
        </Argument>
      </Arguments>
      <Description>
      Client sends this command when trying to register a new account. Note that client mustn't already be
      logged in, or else server will deny his request. If server is running in LAN_MODE, this command will be ignored.
      </Description>
      <Response>
      Server will respond with either <clink name="REGISTRATIONDENIED"/> or <clink name="REGISTRATIONACCEPTED"/> command.
      </Response>
      <Examples>
        <Example>REGISTER Johnny Gnmk1g3mcY6OWzJuM4rlMw==</Example>
      </Examples>
    </Command>

    <Command Name="REGISTRATIONDENIED" Source="server">
      <Arguments>
        <Argument Name="reason" Optional="no" Sentence="yes" />
      </Arguments>
      <Description>
      Sent to client who has just sent <clink name="REGISTER"/> command, if registration has been refused.
      </Description>
    </Command>

    <Command Name="REGISTRATIONACCEPTED" Source="server">
      <Description>
      Sent to client who has just sent <clink name="REGISTER"/> command, if registration has been accepted.
      </Description>
    </Command>

    <Command Name="RENAMEACCOUNT" Source="client">
      <Arguments>
        <Argument Name="newUsername" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Will rename current account which is being used by the user to newUsername. User has to be logged in for this
      to work. After server renames the account, it will disconnect him.
      </Description>
      <Response>
      No response is prescribed, although server may reply with some <clink name="SERVERMSG"/> command.
      </Response>
      <Examples>
        <Example>RENAMEACCOUNT Johnny2</Example>
      </Examples>
    </Command>

    <Command Name="CHANGEPASSWORD" Source="client">
      <Arguments>
        <Argument Name="oldPassword" Optional="no" Sentence="no" />
        <Argument Name="newPassword" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Will change password of client's account (which he is currently using).
      </Description>
      <Response>
      No response is prescribed, although server may reply with some <clink name="SERVERMSG"/> command.
      </Response>
    </Command>

    <Command Name="LOGIN" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no" />
        <Argument Name="password" Optional="no" Sentence="no">
        Should be sent in encoded form (MD5 hash in base-64 form).
        Note that when server is running in lan mode, you can specify any username and password
        (password will be ignored, but you must send some string anyway - you mustn't ommit it!)
        </Argument>
        <Argument Name="cpu" Optional="no" Sentence="no">
        An integer denoting the speed of client's processor in MHz (or value of x+ tag if AMD).
        Client should leave this value at 0 if it can't figure out its CPU speed.
        </Argument>
        <Argument Name="localIP" Optional="no" Sentence="no">
        As localIP client should send his local IP (e.g. 192.168.x.y, or whatever it uses)
        so server can forward local IPs to clients behind same NAT (this resolves some
        of the host/joining issues). If client is unable to determine his local IP,
        he should send "*" instead.
        </Argument>
        <Argument Name="lobby name and version" Optional="no" Sentence="yes" />
        <Argument Name="userID" Optional="yes" Sentence="no">
        This is a unique user identification number provided by the client-side software.
        It should be an unsigned integer encoded in hexadecimal form (see examples).
        Note that this parameter is optional - by default it is not used/set. Server will
        send a <clink name="ACQUIREUSERID"/> command to tell the client that he must provide a user ID,
        if needed. However, if client-side lobby program was using user ID before, it
        should send it along with LOGIN command.
        </Argument>
        <Argument Name="compFlags" Optional="yes" Sentence="yes">
        When connecting, the lobby client can tell the lobby server it is compatible with some
        optional functionalities that break backward compatibility. Each flag in the space separated
        compFlags parameter indicates a specific functionality (like IRC user/channel flags).
        By default, all the optional functionalities are considered as not supported by the client.
        For the current list of flags, see
        <i>Recent changes - Version *-SNAPSHOT - Compatibility-Flags</i>
        in the beginning of this document.
        </Argument>
      </Arguments>
      <Description>
      Sent by client when he is trying to log on the server. Server may respond with
      <clink name="ACCEPTED"/> or <clink name="DENIED"/> command.
      Note that if client hasn't yet confirmed the server agreement, then server will
      send the agreement to client upon receiving LOGIN command (LOGIN command
      will be ignored - client should resend LOGIN command once user has agreed to
      the agreement or disconnect from the server if user has rejected the agreement).
      <br />
      Also see <clink name="LOGININFOEND"/> command.
      </Description>
      <Response />
      <Examples>
        <Example>LOGIN Johnny Gnmk1g3mcY6OWzJuM4rlMw== 3200 192.168.1.100 TASClient 0.30</Example>
        <Example>LOGIN Johnny Gnmk1g3mcY6OWzJuM4rlMw== 3200 * TASClient 0.30</Example>
        <Example>LOGIN Johnny Gnmk1g3mcY6OWzJuM4rlMw== 3200 * TASClient 0.30<b>[TAB]</b>FA23BB4A</Example>
        <Example>LOGIN Johnny Gnmk1g3mcY6OWzJuM4rlMw== 3200 * TASClient 0.30<b>[TAB]</b>0<b>[TAB]</b>ab</Example>
      </Examples>
    </Command>

    <Command Name="ACCEPTED" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent as a response to <clink name="LOGIN"/> command if it succeeded.
      After server has finished sending info on clients and battles, it will send <clink name="LOGININFOEND"/>
      command indicating that it has finished sending the login info.
      </Description>
      <Response />
      <Examples />
    </Command>

    <Command Name="DENIED" Source="server">
      <Arguments>
        <Argument Name="reason" Optional="no" Sentence="yes" />
      </Arguments>
      <Description>
      Sent as a response to a failed <clink name="LOGIN"/> command.
      </Description>
    </Command>


    <Command Name="LOGININFOEND" Source="server">
      <Description>
      Sent by server indicating that it has finished sending the login info (which is sent
      immediately after accepting the LOGIN command). This way client can figure out when
      server has finished updating clients and battles info and can so figure out when login
      sequence is finished.
      <br />
      Note that sending login info consists of 4 phases:
      <ul>
        <li>sending MOTD</li>
        <li>sending list of all users currently logged on the server</li>
        <li>sending info currently active battles</li>
        <li>sending statuses of all users</li>
      </ul>
      LOGININFOEND command is sent when server has finished sending this info.
      </Description>
      <Examples>
      </Examples>
    </Command>

    <Command Name="AGREEMENT" Source="server">
      <Arguments>
        <Argument Name="agreement" Optional="no" Sentence="yes">
        Agreement is sent in "Rich Text" format (.rtf file streamed via socket).
        </Argument>
      </Arguments>
      <Description>
      Sent by server upon receiving LOGIN command, if client has not yet agreed to server's
      "terms-of-use" agreement. Server may send multiple AGREEMENT commands (which corresponds to multiple
      new lines in agreement), finishing it by <clink name="AGREEMENTEND"/> command. Client should send
      <clink name="CONFIRMAGREEMENT"/> and then resend LOGIN command, or disconnect from the server if he has
      chosen to refuse the agreement.
      </Description>
      <Response>
      No response is expected until <clink name="AGREEMENTEND"/> is received. See that command for more info.
      </Response>
      <Examples>
      </Examples>
    </Command>

    <Command Name="AGREEMENTEND" Source="server">
      <Description>
      Sent by server after multiple <clink name="AGREEMENT"/> commands. This way server tells the client
      that he has finished sending the agreement (this is the time when lobby should popup
      the "agreement" screen and wait for user to accept/reject it).
      </Description>
      <Response>
      <clink name="CONFIRMAGREEMENT"/> command is expected from the client in case user agreed to the agreement.
      Or else client should disconnect from the server.
      </Response>
    </Command>

    <Command Name="CONFIRMAGREEMENT" Source="client">
      <Description>
      Sent by client notifying the server that user has confirmed the agreement.
      Also see <clink name="AGREEMENT"/> command.
      </Description>
    </Command>

    <Command Name="MOTD" Source="server">
      <Arguments>
        <Argument Name="message" Optional="no" Sentence="yes" />
      </Arguments>
      <Description>
       Sent by server after client has successfully logged in. Server can send multiple MOTD
       commands (each MOTD corresponds to one line, for example).
      </Description>
      <Examples>
      </Examples>
    </Command>

    <Command Name="OFFERFILE" Source="server">
      <Arguments>
        <Argument Name="options" Optional="no" Sentence="no">
        An integer (in text format), where each bit has its own meaning:
        <ul>
          <li>bit0 - should file be opened once it is downloaded</li>
          <li>bit1 - should program be closed once file is downloaded</li>
          <li>bit2 - is this file "mandatory" (e.g. patch - if user doesn't accept it, it must disconnect from the server)</li>
        </ul>
        </Argument>
        <Argument Name="filename" Optional="no" Sentence="yes">
        Filename is the name of the file to which the file should
        be saved on client's side. If filename = *, then client should extract
        file name from URL and use it instead of filename.
        </Argument>
        <Argument Name="url" Optional="no" Sentence="yes">
        URL from which lobby program should download the update file.
        </Argument>
        <Argument Name="description" Optional="no" Sentence="yes">
        Description of the file offered. Lobby program should display this description (in a message box, for example).
        </Argument>
      </Arguments>
      <Description>
      Sent as a response to <clink name="REQUESTUPDATEFILE"/> command.
      </Description>
      <Examples>
        <Example>OFFERFILE 7 *  http://taspring.clan-sy.com/dl/spring_0.74b2_update.exe This is a 0.74b1->0.74b2 patch.</Example>
      </Examples>
    </Command>

    <Command Name="UDPSOURCEPORT" Source="server">
      <Arguments>
        <Argument Name="port" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent as a response to client's UDP packet (used with "hole punching" NAT traversal
      technique). For more info see the description of NAT traversal technique used
      by the lobby.
      </Description>
      <Examples>
        <Example>UDPSOURCEPORT 52361</Example>
      </Examples>
    </Command>

    <Command Name="CLIENTIPPORT" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no" />
        <Argument Name="ip" Optional="no" Sentence="no" />
        <Argument Name="port" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent to battle's host notifying him about another client's IP address and his
      public UDP source port. Host needs to know public UDP source ports of all players in his
      battle in order for "hole punching" technique to work. IP is needed with both nat traversal
      methods ("hole punching" and "fixed source ports").
      This command is sent to the battle host immediately after new user joins the battle
      (currently only if some nat traversal technique is used).
      </Description>
    </Command>

    <Command Name="HOSTPORT" Source="server">
      <Arguments>
        <Argument Name="port" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent by server to all clients participating in the battle (except for the host) notifying
      them about the new host port. This message will only be sent right before host starts a game,
      if this battle is being hosted using "hole punching" NAT traversal technique. When client
      receives this message, he should replace battle's host port with this new port, so that when
      game actually starts, he will connect to this new port rather than the port which host selected
      when he initialy started the battle (with <clink name="OPENBATTLE"/> command).
      </Description>
    </Command>

    <Command Name="SERVERMSG" Source="server">
      <Arguments>
        <Argument Name="message" Optional="no" Sentence="yes" />
      </Arguments>
      <Description>
      A general purpose message sent by the server. Lobby program should display it either in the chat log
      or in some kind of system log, where client will notice it. Also see <clink name="SERVERMSGBOX"/> command.
      </Description>
      <Examples>
        <Example>SERVERMSG Server is going down in 5 minutes for a restart, due to a new update.</Example>
      </Examples>
    </Command>

    <Command Name="SERVERMSGBOX" Source="server">
      <Arguments>
        <Argument Name="message" Optional="no" Sentence="yes" />
        <Argument Name="url" Optional="yes" Sentence="yes">
        If specified, lobby client should ask user if he wants this url to be opened in a browser window.
        Lobby client should then (once user clicks OK) launch the default browser and open this url in it.
        </Argument>
      </Arguments>
      <Description>
      This is a message sent by the server that should open in a message box dialog window (and not
      just in the console). Also see <clink name="SERVERMSG"/> command.
      </Description>
    </Command>

    <Command Name="ADDUSER" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no" />
        <Argument Name="country" Optional="no" Sentence="no">
        A two-character country code based on ISO 3166 standard. See <url>http://www.iso.org/iso/en/prods-services/iso3166ma/index.html</url>
        </Argument>
        <Argument Name="cpu" Optional="no" Sentence="no">
        See <clink name="LOGIN"/> command for CPU field.
        </Argument>
        <Argument Name="accountID" Optional="yes" Sentence="no">
        Unique ID bound to the account (can be used to track renammed accounts).
        This field is only provided if the lobby client sent the accountID compatibility flag ('a') in the
        <clink name="LOGIN"/> command.
        </Argument>
      </Arguments>
      <Description>
      Sent by server to client telling him new user joined a server. Client should add this
      user to his clients list which he must maintain while he is connected to the server.
      Server will send multiple commands of this kind once client logs in, sending him the list
      of all users currently connected.
      </Description>
    </Command>

    <Command Name="REMOVEUSER" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent to client telling him a user disconnected from server. Client should
      remove this user from his clients list which he must maintain while he is connected
      to the server.
      </Description>
    </Command>

    <Command Name="JOIN" Source="client">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no" />
        <Argument Name="key" Optional="yes" Sentence="no">
        If channel is locked, then client must
        supply a correct key to join the channel (clients with access >= Account.ADMIN_ACCESS
        can join locked channels withouth supplying the key - needed for ChanServ bot).
        </Argument>
      </Arguments>
      <Description>
      Sent by client trying to join a channel.
      </Description>
      <Examples>
        <Example>JOIN main</Example>
        <Example>JOIN myprivatechannel mypassword</Example>
      </Examples>
    </Command>

    <Command Name="JOIN" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no">
        Name of the channel to which client has just joined (by previously sending the <clink name="JOIN:client"/> command).
        </Argument>
      </Arguments>
      <Description>
      Sent to a client who has successfully joined a channel.
      </Description>
      <Examples>
        <Example>JOIN main</Example>
      </Examples>
    </Command>

    <Command Name="JOINFAILED" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="reason" Optional="no" Sentence="yes">
        Always provided.
        </Argument>
      </Arguments>
      <Description>
      Sent if joining a channel failed for some reason.
      </Description>
    </Command>

    <Command Name="CHANNELS" Source="client">
      <Description>
      Sent by client when requesting channels list
      </Description>
      <Response>
      Server will respond with a series of <clink name="CHANNEL" /> command, ending it with <clink name="ENDOFCHANNELS" /> command.
      </Response>
      <Examples>
        <Example>JOIN main</Example>
      </Examples>
    </Command>

    <Command Name="CHANNEL" Source="server">
    <Arguments>
      <Argument Name="chanName" Optional="no" Sentence="no" />
      <Argument Name="userCount" Optional="no" Sentence="no">
      Number of users in channel.
      </Argument>
    </Arguments>
    <Description>
    Sent by server to client who requested channel list via <clink name="CHANNELS" /> command.
    A series of these commands will be sent to user, one for each open channel. Topic parameter
    may be omited if topic is not set for the channel. A series of CHANNEL commands is ended
    by <clink name="ENDOFCHANNELS" /> command.
    </Description>
    </Command>

    <Command Name="ENDOFCHANNELS" Source="server">
      <Description>
      Sent to client who previously requested channel list, after a
      series of CHANNEL commands (one for each channel).
      </Description>
    </Command>

    <Command Name="MUTELIST" Source="client">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent by client when requesting mute list of a channel.
      </Description>
      <Examples>
        <Example>MUTELIST main</Example>
      </Examples>
    </Command>

    <Command Name="MUTELISTBEGIN" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent by server when sending channel's mute list to the client. This command is immediately followed
      by 0 or more MUTELIST commands and finally by a MUTELISTEND command.
      </Description>
      <Response>
      Followed by 0 or more <clink name="MUTELIST:server"/> commands and finally by a <clink name="MUTELISTEND"/> command.
      </Response>
    </Command>

    <Command Name="MUTELIST" Source="server">
      <Arguments>
        <Argument Name="mute description" Optional="no" Sentence="yes">
        Form of this argument is not prescribed (it may vary from version to version).
        Lobby program should simply display it as it receives it.
        </Argument>
      </Arguments>
      <Description>
      Sent after <clink name="MUTELISTBEGIN"/> command. Multiple commands of this kind may be sent
      after MUTELISTSTART command (or none, if mute list is empty).
      </Description>
      <Examples>
        <Example>MUTELIST Johnny, 345 seconds remaining</Example>
        <Example>MUTELIST rabbit, indefinite time remaining</Example>
      </Examples>
    </Command>

    <Command Name="MUTELISTEND" Source="server">
      <Description>
      Sent by server after it has finished sending the list of mutes for a channel.
      Also see <clink name="MUTELIST:server"/> and <clink name="MUTELISTBEGIN"/> commands.
      </Description>
    </Command>

    <Command Name="CHANNELTOPIC" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="author" Optional="no" Sentence="no"/>
        <Argument Name="changedTime" Optional="no" Sentence="no">
        Time in milliseconds since Jan 1, 1970 (UTC). Divide by 1000 to get unix time.
        </Argument>
        <Argument Name="topic" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent to client who just joined the channel, if some topic is set for this channel.
      </Description>
    </Command>

    <Command Name="CHANNELTOPIC" Source="client">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="topic" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by privileged user who is trying to change channel's topic. Use * as topic if you wish
      to disable it.
      </Description>
    </Command>

    <Command Name="CLIENTS" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="clients" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent to a client who just joined the channel. Note: Multiple commands of this
      kind can be sent in a row. Server takes the list of clients in a channel and separates
      it into several lines and sends each line seperately. This ensures no line is too long,
      because client may have some limit set on the maximum length of the line and it could
      ignore it if it was too long. Also note that the client itself (his username) is sent in
      this list too! So when client receives JOIN command he should not add his name in the clients
      list of the channel - he should wait for CLIENTS command which will contain his name too
      and he will add himself then automatically.
      </Description>
    </Command>

    <Command Name="JOINED" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent to all clients in a channel (except the new client) when a new client
      joins the channel.
      </Description>
    </Command>

    <Command Name="LEAVE" Source="client">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by client when he is trying to leave a channel. When client is disconnected, he is
      automatically removed from all channels.
      </Description>
    </Command>

    <Command Name="LEFT" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="reason" Optional="yes" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to all clients in a channel when some client left this channel.
      WARNING: Server does not send this command to a client that has just left a channel,
      because there is no need to (client who has left the channel knows that already).
      Client that was kicked from the channel is notified about it via <clink name="FORCELEAVECHANNEL:server"/> command.
      </Description>
    </Command>

    <Command Name="FORCELEAVECHANNEL" Source="client">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="reason" Optional="yes" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by client (moderator) requsting that the user is removed from the channel.
      User will be notified with <clink name="FORCELEAVECHANNEL:server"/> command.
      </Description>
    </Command>

    <Command Name="FORCELEAVECHANNEL" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="reason" Optional="yes" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent to user who has just been kicked from the channel #channame
      by user "username". (lobby client should now internally close/detach from the channel
      as he was removed from the clients list of #channame on server side)
      </Description>
    </Command>

    <Command Name="CHANNELMESSAGE" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by server to all clients in a channel. Used to broadcast messages
      in the channel.
      </Description>
    </Command>

    <Command Name="SAY" Source="client">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by client when he is trying to say something in a specific channel. Client must
      first join the channel before he can receive or send messages to that channel.
      </Description>
      <Response>
      See <clink name="SAID:server"/> command.
      </Response>
    </Command>

    <Command Name="SAID" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to all clients participating in this channel when one of the clients
      sent a message to it (including the author of this message).
      </Description>
    </Command>

    <Command Name="SAYEX" Source="client">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by any client when he is trying to say something in "/me" irc style.
      Also see <clink name="SAY:client"/> command.
      </Description>
    </Command>

    <Command Name="SAIDEX" Source="server">
      <Arguments>
        <Argument Name="chanName" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server when client said something using <clink name="SAYEX:client"/> command.
      </Description>
    </Command>

    <Command Name="SAYPRIVATE" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by client when he is trying to send a private message to some other client.
      </Description>
      <Response>
      Server will respond with a <clink name="SAYPRIVATE:server"/> command.
      </Response>
    </Command>

    <Command Name="SAYPRIVATE" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to a client who just sent SAYPRIVATE command to server. This way client
      can verify that server did get his message and that receiver will get it too.
      </Description>
    </Command>

    <Command Name="SAIDPRIVATE" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server when some client sent this client a private message.
      </Description>
    </Command>


    <Command Name="OPENBATTLE" Source="client">
      <Arguments>
        <Argument Name="type" Optional="no" Sentence="no">
        Can be 0 or 1 (0 = normal battle, 1 = battle replay)
        </Argument>
        <Argument Name="natType" Optional="no" Sentence="no">
        NAT traversal method used by the host.
        Must be one of:
        0: none
        1: Hole punching
        2: Fixed source ports
        </Argument>
        <Argument Name="password" Optional="no" Sentence="no">
        Must be "*" if founder does not wish to have password-protected game.
        </Argument>
        <Argument Name="port" Optional="no" Sentence="no"/>
        <Argument Name="maxPlayers" Optional="no" Sentence="no"/>
        <Argument Name="hashCode" Optional="no" Sentence="no">
        A signed 32-bit integer (acquired via unitsync.dll).
        </Argument>
        <Argument Name="rank" Optional="no" Sentence="no"/>
        <Argument Name="mapHash" Optional="no" Sentence="no">
        A signed 32-bit integer as returned from unitsync.dll.
        </Argument>
        <Argument Name="map" Optional="no" Sentence="yes"/>
        <Argument Name="title" Optional="no" Sentence="yes"/>
        <Argument Name="modName" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by client when he is trying to open a new battle. The client becomes a founder of this battle, if command is successful
      (see Response section).
      </Description>
      <Response>
      Client is notified about this command's success via <clink name="OPENBATTLE:server"/>/<clink name="OPENBATTLEFAILED:server"/> commands.
      </Response>
    </Command>

    <Command Name="OPENBATTLE" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent to a client who previously sent <clink name="OPENBATTLE:client"/> command to server, if client's
      request to open new battle has been approved. If server rejected client's request, client
      is notified via <clink name="OPENBATTLEFAILED"/> command. Server first sends BATTLEOPENED command, then
      OPENBATTLE command (this is important - client must have the battle in his battle list
      before he receives OPENBATTLE command!).
      </Description>
    </Command>

    <Command Name="BATTLEOPENED" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no" />
        <Argument Name="type" Optional="no" Sentence="no">
        Can be 0 or 1 (0 = normal battle, 1 = battle replay)
        </Argument>
        <Argument Name="natType" Optional="no" Sentence="no">
        NAT traversal method used by the host.
        Must be one of:
        0: none
        1: Hole punching
        2: Fixed source ports
        </Argument>
        <Argument Name="founder" Optional="no" Sentence="no">
        Username of the client who started this battle.
        </Argument>
        <Argument Name="ip" Optional="no" Sentence="no"/>
        <Argument Name="port" Optional="no" Sentence="no"/>
        <Argument Name="maxPlayers" Optional="no" Sentence="no"/>
        <Argument Name="passworded" Optional="no" Sentence="no">
        A boolean - must be "0" or "1" and not "true" or "false" as it
        is default in Java! Use Misc.strToBool and Misc.boolToStr methods (from TASServer source)
        to convert from one to another.
        </Argument>
        <Argument Name="rank" Optional="no" Sentence="no"/>
        <Argument Name="mapHash" Optional="no" Sentence="no">
        A signed 32-bit integer as returned from unitsync.dll.
        </Argument>
        <Argument Name="map" Optional="no" Sentence="yes"/>
        <Argument Name="title" Optional="no" Sentence="yes"/>
        <Argument Name="modName" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to all registered users, when a new battle has been opened.
      Series of BATTLEOPENED commands are sent to user when he logs in (1 command for each battle).
      Use Battle.createBattleOpenedCommand method to create this command in a String (when modifying TASServer source).
      </Description>
    </Command>

    <Command Name="BATTLECLOSED" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent when founder has closed a battle (or if he was disconnected).
      </Description>
    </Command>

    <Command Name="JOINBATTLE" Source="client">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no"/>
        <Argument Name="password" Optional="yes" Sentence="no"/>
        <Argument Name="scriptPassword" Optional="yes" Sentence="no">
        A random, client-generated string wich will be written to script.txt
        by the host, to avoid account spoofing (= someone is trying to join
        the battle under wrong user-name).
        If set, the password has to be set too, even if it is empty.
        </Argument>
      </Arguments>
      <Description>
      Sent by a client trying to join a battle. Password is an optional parameter.
      </Description>
    </Command>

    <Command Name="JOINBATTLE" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no"/>
        <Argument Name="hashCode" Optional="no" Sentence="no">
        A signed 32-bit integer.
        </Argument>
      </Arguments>
      <Description>
      Sent by server telling the client that he has just joined the battle successfully.
      Server will also send a series of CLIENTBATTLESTATUS commands after this command,
      so that user will get the battle statuses of all the clients in the battle.
      </Description>
    </Command>

    <Command Name="JOINBATTLEREQUEST" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="ip" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Sent by server to battle founder each time a client requests to join his battle, if the
      battle founder supports battle authorization system (i.e. he provided the battle
      authorization compatibility flag ('b') in the <clink name="LOGIN"/> command.).
      </Description>
      <Response>
      When client receives this command, he must send either a JOINBATTLEACCEPT or a JOINBATTLEDENY
      command to the server.
      </Response>
    </Command>

    <Command Name="JOINBATTLEACCEPT" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by client in response to a JOINBATTLEREQUEST command in order to allow
      the user to join the battle.
      </Description>
    </Command>

    <Command Name="JOINBATTLEDENY" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="reason" Optional="yes" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by client in response to a JOINBATTLEREQUEST command in order to prevent
      the user from joining the battle.
      </Description>
    </Command>

    <Command Name="JOINEDBATTLE" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="scriptPassword" Optional="yes" Sentence="no">
        A random, client-generated string wich will be written to script.txt
        by the host, to avoid account spoofing (= someone is trying to join
        the battle under wrong user-name).
        </Argument>
      </Arguments>
      <Description>
      Sent by server to all clients when a new client joins the battle.
      </Description>
    </Command>

    <Command Name="LEFTBATTLE" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no"/>
        <Argument Name="userName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by server to all users when client left a battle (or got disconnected from the server).
      </Description>
    </Command>

    <Command Name="LEAVEBATTLE" Source="client">
      <Description>
      Sent by the client when he leaves a battle. Also sent by a founder of the battle when he
      closes the battle.
      </Description>
    </Command>

    <Command Name="JOINBATTLEFAILED" Source="server">
      <Arguments>
        <Argument Name="reason" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to user who just tried to join a battle but has been rejected by server.
      </Description>
    </Command>

    <Command Name="OPENBATTLEFAILED" Source="server">
      <Arguments>
        <Argument Name="reason" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to user who just tried to open(=host) a new battle and was rejected by
      the server.
      </Description>
    </Command>

    <Command Name="UPDATEBATTLEINFO" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no"/>
        <Argument Name="spectatorCount" Optional="no" Sentence="no">
        Assume that spectator count is 0 if battle type is 0 (normal battle) and
        1 if battle type is 1 (battle replay), as founder of the battle is automatically set
        as a spectator in that case.
        </Argument>
        <Argument Name="locked" Optional="no" Sentence="no">
        A boolean (0 or 1). Note that when client creates a battle, server assumes
        it is unlocked (by default). Client must make sure it actually is.
        </Argument>
        <Argument Name="mapHash" Optional="no" Sentence="no">
        A signed 32-bit integer. See <clink name="OPENBATTLE"/> command for more info.
        </Argument>
        <Argument Name="mapName" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to all registered clients telling them
      some of the parameters of the battle changed. Battle's inside
      changes, like starting metal, energy, starting position etc., are sent only to clients
      participating in the battle via <clink name="SETSCRIPTTAGS:server"/> command.
      </Description>
    </Command>

    <Command Name="UPDATEBATTLEINFO" Source="client">
      <Arguments>
        <Argument Name="spectatorCount" Optional="no" Sentence="no"/>
        <Argument Name="locked" Optional="no" Sentence="no">
        A boolean (0 or 1). Note that when client creates a battle, server assumes
        it is unlocked (by default). Client must make sure it actually is.
        </Argument>
        <Argument Name="mapHash" Optional="no" Sentence="no">
        A signed 32-bit integer. See <clink name="OPENBATTLE"/> command for more info.
        </Argument>
        <Argument Name="mapName" Optional="no" Sentence="yes">
        Must NOT contain file extension!
        </Argument>
      </Arguments>
      <Description>
      Sent by the founder of the battle telling the server some of the "outside" parameters
      of the battle changed.
      </Description>
    </Command>

    <Command Name="SAYBATTLE" Source="client">
      <Arguments>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by client who is participating in a battle to server, who forwards this message
      to all other clients in the battle. BATTLE_ID is not required since every user can
      participate in only one battle at the time. If user is not participating in the battle,
      this command is ignored and is considered invalid.
      </Description>
    </Command>

    <Command Name="SAIDBATTLE" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to all clients participating in a battle when client sent a message
      to it using SAYBATTLE command. BATTLE_ID is not required since every client knows in
      which battle he is participating in, since every client may participate in only one
      battle at the time. If client is not participating in a battle, he should ignore
      this command or raise an error (this should never happen!).
      </Description>
    </Command>

    <Command Name="SAYBATTLEEX" Source="client">
      <Arguments>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by any client participating in a battle when he wants to say something in "/me" irc style.
      Server can forge this command too (for example when founder of the battle kicks a user, server
      uses SAYBATTLEEX saying founder kicked a user).
      </Description>
    </Command>

    <Command Name="SAIDBATTLEEX" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server to all clients participating in a battle when client used SAYBATTLEEX command.
      See <clink name="SAYBATTLEEX:client"/> for more info.
      </Description>
    </Command>

    <Command Name="MYSTATUS" Source="client">
      <Arguments>
        <Argument Name="status" Optional="no" Sentence="no">
        A signed integer in text form (e.g. "1234").
        Each bit has its meaning:
        <ul>
          <li>b0 = in game (0 - normal, 1 - in game)</li>
          <li>b1 = away status (0 - normal, 1 - away)</li>
          <li>b2-b4 = rank (see Account class implementation for description of rank) - client is not
              allowed to change rank bits himself (only server may set them).</li>
          <li>b5 = access status (tells us whether this client is a server moderator or not) - client is not
              allowed to change this bit himself (only server may set them).</li>
          <li>b6 = bot mode (0 - normal user, 1 - automated bot). This bit is copied from user's account
              and can not be changed by the client himself. Bots differ from human players in that
              they are fully automated and that some anti-flood limitations do not apply to them.</li>
        </ul>
        </Argument>
      </Arguments>
      <Description>
      Sent by client to server telling him his status changed.
      To figure out if battle is "in-game", client must check in-game status of the host.
      </Description>
    </Command>

    <Command Name="CLIENTSTATUS" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="status" Optional="no" Sentence="no">
        See <clink name="MYSTATUS:client"/> command for possible values of this parameter.
        </Argument>
      </Arguments>
      <Description>
      Sent by server to all registered clients indicating that client's status changed.
      Note that client's status is considered 0 if not said otherwise (for example,
      when you logon, server sends only statuses of those clients whose statuses differ
      from 0, to save the bandwidth).
      </Description>
    </Command>

    <Command Name="MYBATTLESTATUS" Source="client">
      <Arguments>
        <Argument Name="battleStatus" Optional="no" Sentence="no">
          An integer but with limited range: 0..2147483647 (use signed int and
          consider only positive values and zero). Number is sent as text. Each bit has its meaning:
          <ul>
            <li>b0 = undefined (reserved for future use)</li>
            <li>b1 = ready (0=not ready, 1=ready)</li>
            <li>b2..b5 = team no. (from 0 to 15. b2 is LSB, b5 is MSB)</li>
            <li>b6..b9 = ally team no. (from 0 to 15. b6 is LSB, b9 is MSB)</li>
            <li>b10 = mode (0 = spectator, 1 = normal player)</li>
            <li>b11..b17 = handicap (7-bit number. Must be in range 0..100). Note: Only host can
                change handicap values of the players in the battle (with HANDICAP command).
                These 7 bits are always ignored in this command. They can only be changed
                using HANDICAP command.</li>
            <li>b18..b21 = reserved for future use (with pre 0.71 versions these bits were used for team color index)</li>
            <li>b22..b23 = sync status (0 = unknown, 1 = synced, 2 = unsynced)</li>
            <li>b24..b27 = side (e.g.: arm, core, tll, ... Side index can be between 0 and 15, inclusive)</li>
            <li>b28..b31 = undefined (reserved for future use)</li>
          </ul>
        </Argument>
        <Argument Name="myTeamColor" Optional="no" Sentence="no">
        Should be 32-bit signed integer in decimal form (e.g. 255 and not FF)
        where each color channel should occupy 1 byte (e.g. in hexdecimal: $00BBGGRR,
        B = blue, G = green, R = red).
        Example: 255 stands for $000000FF.
        </Argument>
      </Arguments>
      <Description>
      Sent by a client to the server telling him his status in the battle changed.
      </Description>
    </Command>

    <Command Name="CLIENTBATTLESTATUS" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="battleStatus" Optional="no" Sentence="no">
        See <clink name="MYBATTLESTATUS:client"/> command for possible values
        of this parameter.
        </Argument>
        <Argument Name="teamColor" Optional="no" Sentence="no">
        Uses same format as the one used with <clink name="MYBATTLESTATUS:client"/> command.
        </Argument>
      </Arguments>
      <Description>
      Sent by server to users participating in a battle when one of the clients changes his
      battle status.
      </Description>
    </Command>

    <Command Name="REQUESTBATTLESTATUS" Source="server">
      <Description>
      Sent by the server to a user which just opened a battle or joined one.
      This command is sent after all CLIENTBATTLESTATUS commands for
      all clients have been sent. This way, the user can choose a suitable team,
      ally-team and color, since he knows the battle statuses of other clients
      already.
      </Description>
      <Response>
      When a client receives this command, he has to send the MYBATTLESTATUS
      command to the server, so that the server can synchronize the battle
      status with the other clients.
      </Response>
    </Command>

    <Command Name="HANDICAP" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="value" Optional="no" Sentence="no">
        Must be in range [0, 100] (inclusive).
        </Argument>
      </Arguments>
      <Description>
      Sent by founder of the battle changing username's handicap value (of his battle status).
      Only founder can change other users handicap values (even they themselves can't change it).
      </Description>
    </Command>

    <Command Name="KICKFROMBATTLE" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by founder of the battle when he kicks the client out of the battle. Server remove client
      from the battle and notify him about it via <clink name="FORCEQUITBATTLE:server"/> command.
      </Description>
    </Command>

    <Command Name="FORCEQUITBATTLE" Source="server">
      <Description>
      Sent to client for whom founder requested kick with KICKFROMBATTLE command.
      Client doesn't need to send LEAVEBATTLE command, that is already done by the server.
      The only purpose this commands serves to is to notify client that he was kicked from
      the battle. Note that client should close the battle internally, since he is no longer
      a part of it (or he can do that once he receives LEFTBATTLE command containing his username).
      </Description>
    </Command>

    <Command Name="FORCETEAMNO" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="teamNo" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by founder the of battle when he is trying to force some other client's team number
      to 'teamno'. Server will update client's battle status automatically.
      </Description>
    </Command>

    <Command Name="FORCEALLYNO" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="teamNo" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by founder of the battle when he is trying to force some other client's ally number
      to 'allyno'. Server will update client's battle status automatically.
      </Description>
    </Command>

    <Command Name="FORCETEAMCOLOR" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="color" Optional="no" Sentence="no">
        Should be a 32-bit signed integer in decimal form (e.g. 255 and not FF)
        where each color channel should occupy 1 byte (e.g. in hexdecimal: $00BBGGRR,
        B = blue, G = green, R  = red).
        Example: 255 stands for $000000FF.
        </Argument>
      </Arguments>
      <Description>
      Sent by founder of the battle when he is trying to force some other client's team color
      to 'color'. Server will update client's battle status automatically.
      </Description>
    </Command>

    <Command Name="FORCESPECTATORMODE" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by founder of the battle when he is trying to force some other client's mode
      to spectator. Server will update client's battle status automatically.
      </Description>
    </Command>

    <Command Name="DISABLEUNITS" Source="client">
      <Arguments>
        <Argument Name="unitName1" Optional="no" Sentence="no">
        Multiple units may follow, but at least one must be present in the arguments list.
        </Argument>
        <Argument Name="unitName2" Optional="no" Sentence="no"/>
        <Argument Name="..." Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by founder of the battle to server telling him he disabled one or more units.
      At least one unit name must be passed as an argument.
      </Description>
    </Command>

    <Command Name="DISABLEUNITS" Source="server">
      <Arguments>
        <Argument Name="unitName1" Optional="no" Sentence="no">
        Multiple units may follow, but at least one must be present in the arguments list.
        </Argument>
        <Argument Name="unitName2" Optional="no" Sentence="no"/>
        <Argument Name="..." Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by server to all clients in the battle except for the founder, notifying them
      some units have been added to disabled units list. Also see <clink name="DISABLEUNITS:client"/>
      </Description>
    </Command>

    <Command Name="ENABLEUNITS" Source="client">
      <Arguments>
        <Argument Name="unitName1" Optional="no" Sentence="no">
        Multiple units may follow, but at least one must be present in the arguments list.
        </Argument>
        <Argument Name="unitName2" Optional="no" Sentence="no"/>
        <Argument Name="..." Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by founder of the battle to server telling him he enabled one or more previous
      disabled units. At least one unit name must be passed as an argument.
      </Description>
    </Command>

    <Command Name="ENABLEUNITS" Source="server">
      <Arguments>
        <Argument Name="unitName1" Optional="no" Sentence="no">
        Multiple units may follow, but at least one must be present in the arguments list.
        </Argument>
        <Argument Name="unitName2" Optional="no" Sentence="no"/>
        <Argument Name="..." Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by server to all clients in the battle except for the founder, notifying them
      some units have been removed from disabled units list.
      </Description>
    </Command>

    <Command Name="ENABLEALLUNITS" Source="client">
      <Description>
      Sent by founder of the battle to server telling him he enabled ALL units and so clearing
      the disabled units list.
      </Description>
    </Command>

    <Command Name="ENABLEALLUNITS" Source="server">
      <Description>
      Sent by server to all clients in the battle except for the founder, telling them that
      disabled units list has been cleared.
      </Description>
    </Command>

    <Command Name="RING" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by client to server when trying to play a "ring" sound to user 'username'.
      Only privileged users can ring anyone, although "normal" clients can ring
      only when they are hosting and only players participating in their battle.
      </Description>
    </Command>

    <Command Name="RING" Source="server">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by server to client telling him user 'username' just rang (client should play
      the "ring" sound once he receives this command).
      </Description>
    </Command>

    <Command Name="REDIRECT" Source="server">
      <Arguments>
        <Argument Name="ip" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by server when in "redirection mode". When client connects, server will send him
      only this message and disconnect the socket immediately. Client should connect to 'ipaddress'
      in that case. This command may be useful when official server address changes, so that
      clients are automatically redirected to the new one.
      </Description>
      <Examples>
        <Example>
        REDIRECT 87.96.164.14
        </Example>
      </Examples>
    </Command>

    <Command Name="BROADCAST" Source="server">
      <Arguments>
        <Argument Name="message" Optional="no" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by server when urgent message has to be delivered to all users.
      Lobby program should display this message either in some system log or
      in some message box (user must see this message!).
      </Description>
    </Command>

    <Command Name="ADDBOT" Source="client">
      <Arguments>
        <Argument Name="name" Optional="no" Sentence="no"/>
        <Argument Name="battleStatus" Optional="no" Sentence="no"/>
        <Argument Name="teamColor" Optional="no" Sentence="no">
        Should be 32-bit signed integer in decimal system (e.g. 255 and not FF)
        where each color channel should occupy 1 byte (e.g. in hexdecimal: $00BBGGRR,
        B = blue, G = green, R  = red).
        </Argument>
        <Argument Name="ai dll" Optional="no" Sentence="yes"/> <!-- FIXME outdated (at least the name) -->
      </Arguments>
      <Description>
      With this command client can add bots to the battle.
      </Description>
    </Command>

    <Command Name="ADDBOT" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no">
        BATTLE_ID is there just to help client verify that
        the bot is meant for his battle.
        </Argument>
        <Argument Name="name" Optional="no" Sentence="no"/>
        <Argument Name="owner" Optional="no" Sentence="no"/>
        <Argument Name="battleStatus" Optional="no" Sentence="no"/>
        <Argument Name="teamColor" Optional="no" Sentence="no">
        Should be 32-bit signed integer in decimal system (e.g. 255 and not FF)
        where each color channel should occupy 1 byte (e.g. in hexdecimal: $00BBGGRR,
        B = blue, G = green, R  = red).
        </Argument>
        <Argument Name="ai dll" Optional="no" Sentence="yes"/> <!-- FIXME outdated (at least the name) -->
      </Arguments>
      <Description>
      This command indicates that client has added a bot to the battle.
      </Description>
    </Command>

    <Command Name="REMOVEBOT" Source="client">
      <Arguments>
        <Argument Name="name" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Removes a bot from the battle.
      </Description>
    </Command>

    <Command Name="REMOVEBOT" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no">
        BATTLE_ID is there just to help client verify that
        the bot is meant for his battle.
        </Argument>
        <Argument Name="name" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Indicates that bot has been removed from the battle.
      Sent by server.
      </Description>
    </Command>

    <Command Name="UPDATEBOT" Source="client">
      <Arguments>
        <Argument Name="name" Optional="no" Sentence="no"/>
        <Argument Name="battleStatus" Optional="no" Sentence="no">
        Similar to that of the normal client's, see <clink name="MYBATTLESTATUS:client"/> for more info.
        </Argument>
        <Argument Name="teamColor" Optional="no" Sentence="no">
        Should be 32-bit signed integer in decimal system (e.g. 255 and not FF)
        where each color channel should occupy 1 byte (e.g. in hexdecimal: $00BBGGRR,
        B = blue, G = green, R  = red).
        </Argument>
      </Arguments>
      <Description>
      Sent by client when he is trying to update status of one of his own bots (only bot owner and
      battle host may update bot).
      </Description>
    </Command>

    <Command Name="UPDATEBOT" Source="server">
      <Arguments>
        <Argument Name="battleID" Optional="no" Sentence="no">
        BATTLE_ID is there just to help client verify that
        the bot is meant for his battle.
        </Argument>
        <Argument Name="name" Optional="no" Sentence="no"/>
        <Argument Name="battleStatus" Optional="no" Sentence="no">
        Similar to that of the normal client's, see <clink name="MYSTATUC:client"/> for more info.
        </Argument>
        <Argument Name="teamColor" Optional="no" Sentence="no">
        Should be 32-bit signed integer in decimal system (e.g. 255 and not FF)
        where each color channel should occupy 1 byte (e.g. in hexdecimal: $00BBGGRR,
        B = blue, G = green, R  = red).
        </Argument>
      </Arguments>
      <Description>
      Sent by server notifying client in the battle that one of the bots just got his status updated.
      Also see <clink name="UPDATEBOT:client"/> command.
      </Description>
    </Command>

    <Command Name="ADDSTARTRECT" Source="client">
      <Arguments>
        <Argument Name="allyNo" Optional="no" Sentence="no"/>
        <Argument Name="left" Optional="no" Sentence="no"/>
        <Argument Name="top" Optional="no" Sentence="no"/>
        <Argument Name="right" Optional="no" Sentence="no"/>
        <Argument Name="bottom" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by host of the battle adding a start rectangle for 'allyno' ally team. See lobby client
      implementation and Spring docs for more info on this one.
      "left", "top", "right" and "bottom" refer to a virtual rectangle that is 200x200 in size,
      where coordinates should be in interval [0, 200].
      </Description>
    </Command>

    <Command Name="ADDSTARTRECT" Source="server">
      <Arguments>
        <Argument Name="allyNo" Optional="no" Sentence="no"/>
        <Argument Name="left" Optional="no" Sentence="no"/>
        <Argument Name="top" Optional="no" Sentence="no"/>
        <Argument Name="right" Optional="no" Sentence="no"/>
        <Argument Name="bottom" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by server to clients participating in a battle (except for the host).
      See lobby client implementation and Spring docs for more info on this one.
      "left", "top", "right" and "bottom" refer to a virtual rectangle that is 200x200 in size,
      where coordinates should be in interval [0, 200].
      </Description>
    </Command>

    <Command Name="REMOVESTARTRECT" Source="client">
      <Arguments>
        <Argument Name="allyNo" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by host of the battle removing a start rectangle for 'allyno' ally team. See client implementation
      and Spring docs for more info on this one.
      </Description>
    </Command>

    <Command Name="REMOVESTARTRECT" Source="server">
      <Arguments>
        <Argument Name="allyNo" Optional="no" Sentence="no"/>
      </Arguments>
      <Description>
      Sent to clients participating in a battle (except for the host). Also see <clink name="ADDSTARTRECT:client"/> command.
      </Description>
    </Command>

    <Command Name="SCRIPTSTART" Source="client">
      <Description>
      Sent by client who is hosting a battle replay game indicating he is now sending us the game script
      used in the original replay. Server will then forward this script to all other participants in his battle.
      Correct sequence of commands when sending the script file is this:
      <ul>
        <li>1) SCRIPTSTART command</li>
        <li>2) multiple SCRIPT commands</li>
        <li>3) SCRIPTEND command</li>
      </ul>
      </Description>
    </Command>

    <Command Name="SCRIPTSTART" Source="server">
      <Description>
      Sent by server to clients participating in a battle replay indicating that server will now begin
      sending game script from the original replay file (also see SCRIPTSTART comments when sent by the
      client).
      </Description>
    </Command>

    <Command Name="SCRIPT" Source="client">
      <Arguments>
        <Argument Name="line" Optional="no" Sentence="yes">
        This is s a line read from the replay script file (use one SCRIPT command for each line!).
        </Argument>
      </Arguments>
      <Description>
      Sent by client who previously sent SCRIPTSTART command. Multiple commands of this type are expected
      after SCRIPTSTART command, ending with SCRIPTEND command as the last command in the sequence
      (also see SCRIPTSTART comments when sent by the client).
      </Description>
    </Command>

    <Command Name="SCRIPT" Source="server">
      <Arguments>
        <Argument Name="line" Optional="no" Sentence="yes">
        This is s a line read from the replay script file (one line per one SCRIPT command).
        </Argument>
      </Arguments>
      <Description>
      Sent by server after sending SCRIPTSTART command. Multiple commands of this type are expected
      after SCRIPTSTART command, ending with SCRIPTEND command as the last command in the sequence
      (also see comments for SCRIPTSTART command when sent by the client).
      </Description>
    </Command>

    <Command Name="SCRIPTEND" Source="client">
      <Description>
      Sent by client indicating he has finished sending us the game script from the battle replay
      (also see comments for SCRIPTSTART command).
      </Description>
    </Command>

    <Command Name="SCRIPTEND" Source="server">
      <Description>
      Sent by server indicating he has finished sending the game script from the battle replay
      (also see comments for SCRIPTSTART command).
      </Description>
    </Command>

    <Command Name="SETSCRIPTTAGS" Source="client">
      <Arguments>
        <Argument Name="pair1" Optional="no"  Sentence="yes"/>
        <Argument Name="pair2" Optional="yes" Sentence="yes"/>
        <Argument Name="pair3" Optional="yes" Sentence="yes"/>
        <Argument Name="..."   Optional="yes" Sentence="yes"/>
      </Arguments>
      <Description>
      Sent by client (battle host), to set script tags in script.txt. The [pair] format is
      "key=value can have spaces". Keys may not contain spaces, and are expected to use the
      '/' character to separate tables (see example). In version 0.35 of TASServer command
      UPDATEBATTLEDETAILS was completely replaced by this command. The list of attributes
      that were replaced (with example usage):
      <ul>
        <li>SETSCRIPTTAGS GAME/StartMetal=1000</li>
        <li>SETSCRIPTTAGS GAME/StartEnergy=1000</li>
        <li>SETSCRIPTTAGS GAME/MaxUnits=500</li>
        <li>SETSCRIPTTAGS GAME/StartPosType=1</li>
        <li>SETSCRIPTTAGS GAME/GameMode=0</li>
        <li>SETSCRIPTTAGS GAME/LimitDGun=1</li>
        <li>SETSCRIPTTAGS GAME/DiminishingMMs=0</li>
        <li>SETSCRIPTTAGS GAME/GhostedBuildings=1</li>
      </ul>
      Though in reality all tags are joined together in a single SETSCRIPTTAGS command.
      Note that when specifying multiple key+value pairs, they must be separated by TAB
      characters. See the examples bellow.
      </Description>
      <Examples>
        <Example>SETSCRIPTTAGS GAME/MODOPTIONS/TEST=true</Example>
        <Example>SETSCRIPTTAGS GAME/StartMetal=1000<b>[TAB]</b>GAME/StartEnergy=1000</Example>
        <Example>See whitespaces: SETSCRIPTTAGS GAME/StartMetal=1000<b>[TAB]</b>GAME/StartEnergy=1000</Example>
      </Examples>
    </Command>

    <Command Name="SETSCRIPTTAGS" Source="server">
      <Arguments>
        <Argument Name="pair1" Optional="no"  Sentence="yes"/>
        <Argument Name="pair2" Optional="yes" Sentence="yes"/>
        <Argument Name="pair3" Optional="yes" Sentence="yes"/>
        <Argument Name="..."   Optional="yes" Sentence="yes"/>
      </Arguments>
      <Description>
      Relayed from battle host's <clink name="SETSCRIPTTAGS:client"/> message.
      Lobby program must cache and process these tags and apply them accordingly
      when creating "script.txt" file.
      </Description>
      <Examples>
        <Example>SETSCRIPTTAGS GAME/MODOPTIONS/TEST=true</Example>
        <Example>SETSCRIPTTAGS GAME/StartMetal=1000<b>[TAB]</b>GAME/StartEnergy=1000</Example>
        <Example>See whitespaces: SETSCRIPTTAGS GAME/StartMetal=1000<b>[TAB]</b>GAME/StartEnergy=1000</Example>
      </Examples>
    </Command>

    <Command Name="REMOVESCRIPTTAGS" Source="client">
      <Arguments>
        <Argument Name="key1" Optional="no"  Sentence="no"/>
        <Argument Name="key2" Optional="yes" Sentence="no"/>
        <Argument Name="key3" Optional="yes" Sentence="no"/>
        <Argument Name="..."  Optional="yes" Sentence="no"/>
      </Arguments>
      <Description>
      Sent by client (battle host), to remove script tags in script.txt.
      </Description>
      <Examples>
        <Example>REMOVESCRIPTTAGS GAME/MODOPTIONS/TEST1 GAME/MODOPTIONS/TEST2</Example>
      </Examples>
    </Command>

    <Command Name="REMOVESCRIPTTAGS" Source="server">
      <Arguments>
        <Argument Name="key1" Optional="no"  Sentence="no"/>
        <Argument Name="key2" Optional="yes" Sentence="no"/>
        <Argument Name="key3" Optional="yes" Sentence="no"/>
        <Argument Name="..."  Optional="yes" Sentence="no"/>
      </Arguments>
      <Description>
      Relayed from battle host's <clink name="REMOVESCRIPTTAGS:client"/> message.
      Lobby program must remove these tags from its cached script tags database.
      </Description>
      <Examples>
        <Example>REMOVESCRIPTTAGS GAME/MODOPTIONS/TEST1 GAME/MODOPTIONS/TEST2</Example>
      </Examples>
    </Command>

    <Command Name="TESTLOGIN" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no" />
        <Argument Name="password" Optional="no" Sentence="no" />
      </Arguments>
      <Description>
      Used to test if username and password are valid. Currently this command is restricted
      to users with admin access only. It is meant to be used with some external server process
      to identify user via web login form and create a session cookie based on that (will be used
      for web interface to the server).
      </Description>
      <Response>
      Server will respond with either <clink name="TESTLOGINACCEPT" /> or <clink name="TESTLOGINDENY" />
      command.
      </Response>
    </Command>

    <Command Name="TESTLOGINACCEPT" Source="server">
      <Description>
      Used as a response to a <clink name="TESTLOGIN" /> command in case username/password pair is valid.
      Use message ID to bind response to a request.
      </Description>
    </Command>

    <Command Name="TESTLOGINDENY" Source="server">
      <Description>
      Used as a response to a <clink name="TESTLOGIN" /> command in case username/password pair is not valid.
      Use message ID to bind response to a request.
      </Description>
    </Command>

    <Command Name="ACQUIREUSERID" Source="server">
      <Description>
      When client receives this command, he should immediately respond with a <clink name="USERID"/> command.
      If client doesn't have a user ID associated yet, he should generate some random ID (unsigned 32 bit integer)
      and save it permanently as his user ID. He will then provide this user ID each time he logs on to the server
      via <clink name="LOGIN"/> command.
      </Description>
    </Command>

    <Command Name="USERID" Source="client">
      <Arguments>
        <Argument Name="userID" Optional="no" Sentence="no">
        Must be an unsigned 32 bit integer, in a hexadecimal form.
        </Argument>
      </Arguments>
      <Description>
      Sent as a response to a <clink name="ACQUIREUSERID"/> command.
      </Description>
      <Examples>
        <Example>USERID FA23BB4A</Example>
      </Examples>
    </Command>

    <Command Name="FORCEJOINBATTLE" Source="client">
      <Arguments>
        <Argument Name="userName" Optional="no" Sentence="no"/>
        <Argument Name="destinationBattleID" Optional="no" Sentence="no"/>
        <Argument Name="destinationBattlePassword" Optional="yes" Sentence="no"/>
      </Arguments>
      <Description>
      A client may send this command if he is a battle host or a lobby moderator.
      The server will decide if they are, and send a command to the addressed user.
	  See the <i>Match-Making</i> section in the beginning of this document for more details.
      </Description>
      <Response>
      See <clink name="FORCEJOINBATTLE:server"/>.
      </Response>
    </Command>

    <Command Name="FORCEJOINBATTLE" Source="server">
      <Arguments>
        <Argument Name="destinationBattleID" Optional="no" Sentence="no"/>
        <Argument Name="destinationBattlePassword" Optional="yes" Sentence="no"/>
      </Arguments>
      <Description>
      Sent to a user specified in a previous <clink name="FORCEJOINBATTLE:client"/>
      command which was received on the server form an other client (host or lobby moderator).
      The receiving client must subsequently comply by sending a
      <clink name="JOINBATTLE:client"/> command to the server.
	  See the <i>Match-Making</i> section in the beginning of this document for more details.
      </Description>
    </Command>

  </CommandList>

</ProtocolDescription>
